#include <iostream>
#include <cmath>
using namespace std;
struct coordinates{
    double x;
    double y;
};
struct figures{
    int sides;
    double len;
    double sq;
    double p;
    //coordinates *c1=new coordinates[sides];
    coordinates c1[100];
};
void realloc(figures *polygon, int *n);
//figures *realloc(figures *polygon, int *n);
void square(figures *polygon);
void per(figures *polygon);
void input(figures *polygon, int *n);
//figures *input(figures *polygon, int *n);
void menu(figures *polygon, int *n);
//void output(figures *polygon);
void output(figures *polygon, int n);
void outputcoord(figures *polygon, int n);
//void maxper(figures *polygon, int *n);
//void maxsquare(figures *polygon, int *n);
void max1(figures *polygon, int n);
void maxmax(double *a, int n);
void coord(figures *polygon, int n);
//int checkcoord(figures *polygon);
int checkchar1();
void newpage();
void deletefigure(figures *polygon, int *n);
//figures *deletefigure(figures *polygon, int *n);
//int checkchar(char i);
//double checkchar(char j);
int main()
{
    int n=0;
    figures *polygon=new figures[1];
    menu(polygon, &n);
    //delete [] polygon;
    return 0;
}
/*int checkchar(char i){

}*/
/*double checkchar(char j){

}*/
void realloc(figures *polygon, int *n){
//figures *realloc(figures *polygon, int *n){
    figures *pol1=new figures[(*n)];
    for(int i=0; i<((*n)); i++){
        pol1[i]=polygon[i];
        }
    polygon=new figures[*n];
    //polygon=pol1;
    for(int i=0; i<((*n)); i++){
        polygon[i]=pol1[i];
        }
    pol1=new figures[1];
    //return pol1;
}
int checkchar1(){
    int i;
    while (true) {
        cin>>i;
        if (!cin){
            cin.clear();
            while (cin.get() != '\n');
            cout << "Error! Try again."<<endl;
            cout << "Enter the number: " << endl;
        }
        else break;
    }
    return i;
}
void square(figures *polygon){
    (polygon->sq)=((double)(polygon->sides))*pow((polygon->len), 2)/(4*tan(22/(7*((double)(polygon->sides)))));
    //cout << "Polygon" << polygon << " square " << (polygon->sq)<< endl;
}
void per(figures *polygon){
    //cout << "Polygon" << polygon << " sides: " << polygon->sides << " len: " << polygon->len << endl;
    (polygon->p)=(polygon->sides)*(polygon->len);
    //cout << "Polygon" << polygon << " per " << polygon->p << endl;
}
void maxmax(double *a, int n){
    double max1=0;
    if(n==0){
        cout<<"Unable to define"<<endl;
    }
    else{
    for(int i=0;i<n;i++){
        if(max1-(a[i])<0){
            max1=a[i];
            //cout<<max1;
        }
    }
   cout<<"Polygons with maximal quality:"<<endl;
    for(int j=0; j<(n); j++){
        if(fabs(a[j]-max1)<(double)(1e-05)){
        //if(fabs(a[j]-max1)<(1e-5)){
            cout<<j<<endl;}
    }
}
return ;
}

void max1(figures *polygon, int n){
    cout<<"Choose your option."<<endl;
            cout<<"1-Define the polygon with maximal square"<<endl;
            cout<<"2-Define the polygon with maximal perimetr"<<endl;
            cout<<"3-Return to the main menu"<<endl;
            int choose2;
            choose2=checkchar1();
            newpage();
            switch(choose2){
                case 1:
                maxmax( (&(polygon[0].sq)), n);
                    break;
                case 2:
                maxmax((&(polygon[0].p)), n);
                    break;
                    case 3:
                    cout<<"Returning to the main menu"<<endl;
                    newpage();
                    break;
                default:
                    cout<<"Error"<<endl;
                    break;
                }

}
int checkcoord(figures *polygon){
    int v;
    double R=(polygon->len)/(2*sin(22/(7*((double)polygon->sides))));
    double at1=sqrt(pow((polygon->c1[0].x),2)+pow((polygon->c1[0].y),2));
    /*cout << "R: " << R;
    cout << "at1: " << at1;*/
    if(R>at1){
        cout<<"Error.Try again"<<endl;
        v=-1;
    }
    else{
        v=0;
    }
    return v;
}
void coord(figures *polygon, int n){
    cout<<"Input coordinates of the first point"<<endl;

    (polygon[n].c1[0].x)=checkchar1();
    (polygon[n].c1[0].y)=checkchar1();
    int v=-1;
    v=checkcoord(polygon);
    while(v!=0){
    //cout<<"Error. Try again."<<endl;
    (polygon[n].c1[0].x)=checkchar1();
    (polygon[n].c1[0].y)=checkchar1();
    v=checkcoord(polygon);
    }
    double x0, y0, phi, R;
    R=(polygon[n].len)/(2*sin(22/(7*(double)(polygon[n].sides))));
    phi=atan((polygon[n].c1[0].y)/(polygon[n].c1[0].x));
    y0=(polygon[n].c1[0].y)-R*sin(phi);
    x0=(polygon[n].c1[0].x)-R*cos(phi);
    //a=sqrt(pow(x0,2)+pow(y0,2));
    for(int i=1; i<(polygon[n].sides); i++){
        (polygon[n].c1[i].x)=x0+R*cos(phi+44/7*i/(double)(polygon[n].sides));
        (polygon[n].c1[i].y)=y0+R*sin(phi+44/7*i/(double)(polygon[n].sides));
}
}
void input(figures *polygon, int *n){
//figures *input(figures *polygon, int *n){
    (*n)++;
//figures *pol1=NULL;
    realloc(polygon, n);
  //figures *pol1=realloc(polygon, n);
    int it=1;
    while(it==1){
    cout<<"Input number of sides"<<endl;
   polygon[(*n)-1].sides=checkchar1();
    //cin>>(polygon[(*n)-1].sides);
    if(polygon[(*n)-1].sides<=2){
        cout<<"Error. Try again."<<endl;
    }
    else{
        cout<<"Input length"<<endl;
        polygon[(*n)-1].len=checkchar1();
        per(&polygon[(*n)-1]);
        square(&polygon[(*n)-1]);
        coord(polygon, ((*n)-1));
        cout<<"Successfully added"<<endl;
        it=0;
    }
    }
  //return pol1;
}
void outputcoord(figures *polygon, int n){
    cout<<"Coordinates:"<<endl;
    for(int i=0; i<(polygon[n].sides); i++){
        cout<<"("<<polygon[n].c1[i].x<<";"<<polygon[n].c1[i].y<<")"<<endl;
    }
}
/*void output(figures *polygon){
    cout<<"number of sides: "<<(polygon->sides)<<endl;
    cout<<"length of sides: "<<(polygon->len)<<endl;
    //cout<<"coordinates:"<<endl;
    //outputcoord(polygon);
    cout<<"p="<<(polygon->p)<<endl;
    cout<<"s="<<(polygon->sq)<<endl;
}*/
void output(figures *polygon, int n){
    if(n==0){
        cout<<"Empty"<<endl;
    }
    else{
    for(int i=0; i<n; i++){
    cout<<"Polygon"<<i<<endl;
    cout<<"number of sides: "<<(polygon[i].sides)<<endl;
    cout<<"length of sides: "<<(polygon[i].len)<<endl;
    outputcoord(polygon, i);
    cout<<"p="<<(polygon[i].p)<<endl;
    cout<<"s="<<(polygon[i].sq)<<endl;
    }
    }
}
void deletefigure(figures *polygon, int *n){
//figures *deletefigure(figures *polygon, int *n){
    //figures *pol1=NULL;
    cout<<"Select the polygon number (starting from 0)"<<endl;
            int num;
            num=checkchar1();
            if((num>=(*n))||(num<0)){
                cout<<"Error"<<endl;
            }
            else{
               for(int i=num+1; i<(*n); i++){
                    polygon[i-1]=polygon[i];
               }
               (*n)=(*n)-1;
               realloc(polygon, n);
               cout<<"Polygon "<<num<<" has been successfully deleted"<<endl;
            }
//return pol1;
}
void newpage(){
    for(int i=0; i<60; i++){
        cout<<endl;
    }
}
void menu(figures *polygon, int *n){
    int choose, it=1;
  //figures *pol1=NULL;
    while(it==1){
            newpage();
            cout<<"Choose your option:"<<endl;
            cout<<"1-Input new information about a polygon"<<endl;
            cout<<"2-Look through the information"<<endl;
            cout<<"3-Delete information about a polygon"<<endl;
            cout<<"4-Define maximal square or perimetr"<<endl;
            cout<<"5-Quit"<<endl;
            choose=checkchar1();
    newpage();
    switch(choose){
    case 1:
        input(polygon, n);
      //pol1=input(polygon, n);
        break;
        case 2:
            /*for(int i=0; i<(*n); i++){
                    output(&polygon[i]);
            }*/
            output(polygon, (*n));
            break;
            case 3:
                deletefigure(polygon, n);
             //pol1=deletefigure(polygon, n);
                break;
                case 4:
                max1(polygon, (*n));
                break;
                case 5:
                    cout<<"Are you sure? (1-yes, 2-no)"<<endl;
                    int choose1;
                    choose1=checkchar1();
                    newpage();
                    switch(choose1){
                        case 1:
                            cout<<"The end"<<endl;
                            /*if(pol1!=NULL){
                                delete [] pol1;
                            }*/
                            delete [] polygon;
                            it=0;
                            break;
                            case 2:
                                it=1;
                                break;
                                default:
                                    cout<<"Error"<<endl;
                                    break;
                                    }
                                    break;
                                    default:
                                        cout<<"Error. Try again."<<endl;
                                        break;
                                        }
                                        //newpage();
 }
}
